{"/home/travis/build/npmtest/node-npmtest-phantom/test.js":"/* istanbul instrument in package npmtest_phantom */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-phantom/lib.npmtest_phantom.js":"/* istanbul instrument in package npmtest_phantom */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_phantom = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_phantom = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-phantom/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-phantom && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_phantom */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_phantom\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_phantom.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_phantom.rollup.js'] =\n            local.assetsDict['/assets.npmtest_phantom.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_phantom.__dirname + '/lib.npmtest_phantom.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-phantom/node_modules/phantom/lib/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _phantom = require('./phantom');\n\nvar _phantom2 = _interopRequireDefault(_phantom);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Retuns a Promise of a new Phantom class instance\n * @param args command args to pass to phantom process\n * @param [config] configuration object\n * @param [config.phantomPath] path to phantomjs executable\n * @param [config.logger] object containing functions used for logging\n * @param [config.logLevel] log level to apply on the logger (if unset or default)\n * @returns {Promise}\n */\nfunction create(args, config) {\n  return new Promise(resolve => resolve(new _phantom2.default(args, config)));\n}\n\nexports.default = { create };\n\n\nmodule.exports.create = create;","/home/travis/build/npmtest/node-npmtest-phantom/node_modules/phantom/lib/phantom.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _phantomjsPrebuilt = require('phantomjs-prebuilt');\n\nvar _phantomjsPrebuilt2 = _interopRequireDefault(_phantomjsPrebuilt);\n\nvar _child_process = require('child_process');\n\nvar _os = require('os');\n\nvar _os2 = _interopRequireDefault(_os);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _split = require('split');\n\nvar _split2 = _interopRequireDefault(_split);\n\nvar _winston = require('winston');\n\nvar _winston2 = _interopRequireDefault(_winston);\n\nvar _events = require('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _page = require('./page');\n\nvar _page2 = _interopRequireDefault(_page);\n\nvar _command = require('./command');\n\nvar _command2 = _interopRequireDefault(_command);\n\nvar _out_object = require('./out_object');\n\nvar _out_object2 = _interopRequireDefault(_out_object);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst defaultLogLevel = process.env.DEBUG === 'true' ? 'debug' : 'info';\nconst NOOP = 'NOOP';\n\n/**\n * Creates a logger using winston\n */\nfunction createLogger() {\n    return new _winston2.default.Logger({\n        transports: [new _winston2.default.transports.Console({\n            level: defaultLogLevel,\n            colorize: true\n        })]\n    });\n}\n\nconst defaultLogger = createLogger();\n\n/**\n * A phantom instance that communicates with phantomjs\n */\nclass Phantom {\n\n    /**\n     * Creates a new instance of Phantom\n     *\n     * @param args command args to pass to phantom process\n     * @param [phantomPath] path to phantomjs executable\n     * @param [logger] object containing functions used for logging\n     * @param [logLevel] log level to apply on the logger (if unset or default)\n     */\n    constructor(args = [], { phantomPath = _phantomjsPrebuilt2.default.path, logger = defaultLogger, logLevel = defaultLogLevel } = {\n        phantomPath: _phantomjsPrebuilt2.default.path,\n        logger: defaultLogger,\n        logLevel: defaultLogLevel\n    }) {\n        if (!Array.isArray(args)) {\n            throw new Error('Unexpected type of parameters. Expecting args to be array.');\n        }\n\n        if (typeof phantomPath !== 'string') {\n            throw new Error('PhantomJS binary was not found. ' + 'This generally means something went wrong when installing phantomjs-prebuilt. Exiting.');\n        }\n\n        if (typeof logger !== 'object') {\n            throw new Error('logger must be ba valid object.');\n        }\n\n        logger.debug = logger.debug || (() => undefined);\n        logger.info = logger.info || (() => undefined);\n        logger.warn = logger.warn || (() => undefined);\n        logger.error = logger.error || (() => undefined);\n\n        this.logger = logger;\n\n        if (logLevel !== defaultLogLevel) {\n            this.logger = createLogger();\n            this.logger.transports.console.level = logLevel;\n        }\n\n        const pathToShim = _path2.default.normalize(__dirname + '/shim/index.js');\n        this.logger.debug(`Starting ${phantomPath} ${args.concat([pathToShim]).join(' ')}`);\n\n        this.process = (0, _child_process.spawn)(phantomPath, args.concat([pathToShim]), { env: process.env });\n        this.process.stdin.setDefaultEncoding('utf-8');\n\n        this.commands = new Map();\n        this.events = new Map();\n\n        this.process.stdout.pipe((0, _split2.default)()).on('data', data => {\n            const message = data.toString('utf8');\n            if (message[0] === '>') {\n                // Server end has finished NOOP, lets allow NOOP again..\n                if (message === '>' + NOOP) {\n                    this.logger.debug('Received NOOP command.');\n                    this.isNoOpInProgress = false;\n                    return;\n                }\n                const json = message.substr(1);\n                this.logger.debug('Parsing: %s', json);\n\n                const parsedJson = JSON.parse(json);\n                const command = this.commands.get(parsedJson.id);\n\n                if (command != null) {\n                    const deferred = command.deferred;\n\n                    if (deferred != null) {\n                        if (parsedJson.error === undefined) {\n                            deferred.resolve(parsedJson.response);\n                        } else {\n                            deferred.reject(new Error(parsedJson.error));\n                        }\n                    } else {\n                        this.logger.error('deferred object not found for command.id: ' + parsedJson.id);\n                    }\n\n                    this.commands.delete(command.id);\n                } else {\n                    this.logger.error('command not found for command.id: ' + parsedJson.id);\n                }\n            } else if (message.indexOf('<event>') === 0) {\n                const json = message.substr(7);\n                this.logger.debug('Parsing: %s', json);\n                const event = JSON.parse(json);\n\n                const emitter = this.events.get(event.target);\n                if (emitter) {\n                    emitter.emit.apply(emitter, [event.type].concat(event.args));\n                }\n            } else if (message && message.length > 0) {\n                this.logger.info(message);\n            }\n        });\n\n        this.process.stderr.on('data', data => this.logger.error(data.toString('utf8')));\n        this.process.on('exit', code => {\n            this.logger.debug(`Child exited with code {${code}}`);\n            this._rejectAllCommands(`Phantom process stopped with exit code ${code}`);\n        });\n        this.process.on('error', error => {\n            this.logger.error(`Could not spawn [${phantomPath}] executable. ` + 'Please make sure phantomjs is installed correctly.');\n            this.logger.error(error);\n            this.kill(`Process got an error: ${error}`);\n            process.exit(1);\n        });\n\n        this.process.stdin.on('error', e => {\n            this.logger.debug(`Child process received error ${e}, sending kill signal`);\n            this.kill(`Error reading from stdin: ${e}`);\n        });\n\n        this.process.stdout.on('error', e => {\n            this.logger.debug(`Child process received error ${e}, sending kill signal`);\n            this.kill(`Error reading from stdout: ${e}`);\n        });\n\n        this.heartBeatId = setInterval(this._heartBeat.bind(this), 100);\n    }\n\n    /**\n     * Returns a value in the global space of phantom process\n     * @returns {Promise}\n     */\n    windowProperty() {\n        return this.execute('phantom', 'windowProperty', [].slice.call(arguments));\n    }\n\n    /**\n     * Returns a new instance of Promise which resolves to a {@link Page}.\n     * @returns {Promise.<Page>}\n     */\n    createPage() {\n        const logger = this.logger;\n        return this.execute('phantom', 'createPage').then(response => {\n            let page = new _page2.default(this, response.pageId);\n            if (typeof Proxy === 'function') {\n                page = new Proxy(page, {\n                    set: function (target, prop) {\n                        logger.warn(`Using page.${prop} = ...; is not supported. Use page.property('${prop}', ...) ` + 'instead. See the README file for more examples of page#property.');\n                        return false;\n                    }\n                });\n            }\n            return page;\n        });\n    }\n\n    /**\n     * Creates a special object that can be used for returning data back from PhantomJS\n     * @returns {OutObject}\n     */\n    createOutObject() {\n        return new _out_object2.default(this);\n    }\n\n    /**\n     * Used for creating a callback in phantomjs for content header and footer\n     * @param obj\n     */\n    callback(obj) {\n        return { transform: true, target: obj, method: 'callback', parent: 'phantom' };\n    }\n\n    /**\n     * Executes a command object\n     * @param command the command to run\n     * @returns {Promise}\n     */\n    executeCommand(command) {\n        this.commands.set(command.id, command);\n\n        let json = JSON.stringify(command, (key, val) => {\n            if (key[0] === '_') {\n                return undefined;\n            } else if (typeof val === 'function') {\n                if (!val.hasOwnProperty('prototype')) {\n                    this.logger.warn('Arrow functions such as () => {} are not supported in PhantomJS. ' + 'Please use function(){} or compile to ES5.');\n                    throw new Error('Arrow functions such as () => {} are not supported in PhantomJS.');\n                }\n                return val.toString();\n            }\n            return val;\n        });\n\n        let promise = new Promise((res, rej) => {\n            command.deferred = { resolve: res, reject: rej };\n        });\n\n        this.logger.debug('Sending: %s', json);\n\n        this.process.stdin.write(json + _os2.default.EOL, 'utf8');\n\n        return promise;\n    }\n\n    /**\n     * Executes a command\n     *\n     * @param target target object to execute against\n     * @param name the name of the method execute\n     * @param args an array of args to pass to the method\n     * @returns {Promise}\n     */\n    execute(target, name, args = []) {\n        return this.executeCommand(new _command2.default(target, name, args));\n    }\n\n    /**\n     * Adds an event listener to a target object (currently only works on pages)\n     *\n     * @param event the event type\n     * @param target target object to execute against\n     * @param runOnPhantom would the callback run in phantomjs or not\n     * @param callback the event callback\n     * @param args an array of args to pass to the callback\n     */\n    on(event, target, runOnPhantom, callback, args = []) {\n        const eventDescriptor = { type: event };\n\n        if (runOnPhantom) {\n            eventDescriptor.event = callback;\n            eventDescriptor.args = args;\n        } else {\n            const emitter = this.getEmitterForTarget(target);\n            emitter.on(event, function () {\n                let params = [].slice.call(arguments).concat(args);\n                return callback.apply(null, params);\n            });\n        }\n        return this.execute(target, 'addEvent', [eventDescriptor]);\n    }\n\n    /**\n     * Removes an event from a target object\n     *\n     * @param event\n     * @param target\n     */\n    off(event, target) {\n        const emitter = this.getEmitterForTarget(target);\n        emitter.removeAllListeners(event);\n        return this.execute(target, 'removeEvent', [{ type: event }]);\n    }\n\n    getEmitterForTarget(target) {\n        let emitter = this.events.get(target);\n\n        if (emitter == null) {\n            emitter = new _events2.default();\n            this.events.set(target, emitter);\n        }\n\n        return emitter;\n    }\n\n    /**\n     * Cleans up and end the phantom process\n     */\n    exit() {\n        clearInterval(this.heartBeatId);\n        if (this.commands.size > 0) {\n            this.logger.warn('exit() was called before waiting for commands to finish. ' + 'Make sure you are not calling exit() too soon.');\n        }\n        return this.execute('phantom', 'invokeMethod', ['exit']);\n    }\n\n    /**\n     * Clean up and force kill this process\n     */\n    kill(errmsg = 'Phantom process was killed') {\n        this._rejectAllCommands(errmsg);\n        this.process.kill('SIGKILL');\n    }\n\n    _heartBeat() {\n        if (!this.isNoOpInProgress) {\n            this.isNoOpInProgress = true;\n            this.logger.debug('Sending NOOP command.');\n            this.process.stdin.write(NOOP + _os2.default.EOL, 'utf8');\n        }\n    }\n\n    /**\n     * rejects all commands in this.commands\n     */\n    _rejectAllCommands(errmsg = 'Phantom exited prematurely') {\n        // prevent heartbeat from preventing this from terminating\n        clearInterval(this.heartBeatId);\n        for (const command of this.commands.values()) {\n            if (command.deferred != null) {\n                command.deferred.reject(new Error(errmsg));\n            }\n        }\n    }\n}\nexports.default = Phantom;","/home/travis/build/npmtest/node-npmtest-phantom/node_modules/phantom/lib/command.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nlet NEXT_ID = 1;\n\nclass Command {\n\n    constructor(target, name, params = []) {\n        this.id = NEXT_ID++;\n        this.target = target;\n        this.name = name;\n        this.params = params;\n        this.deferred = null;\n    }\n}\nexports.default = Command;","/home/travis/build/npmtest/node-npmtest-phantom/node_modules/phantom/lib/out_object.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _phantom = require('./phantom');\n\nvar _phantom2 = _interopRequireDefault(_phantom);\n\nvar _crypto = require('crypto');\n\nvar _crypto2 = _interopRequireDefault(_crypto);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass OutObject {\n\n    constructor(phantom) {\n        this._phantom = phantom;\n        this.target = 'OutObject$' + _crypto2.default.randomBytes(16).toString('hex');\n    }\n\n    property(name) {\n        return this._phantom.execute(this.target, 'property', [name]);\n    }\n}\nexports.default = OutObject;","/home/travis/build/npmtest/node-npmtest-phantom/node_modules/phantom/lib/page.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _phantom = require('./phantom');\n\nvar _phantom2 = _interopRequireDefault(_phantom);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Page class that proxies everything to phantomjs\n */\nclass Page {\n\n    constructor(phantom, pageId) {\n        this.target = 'page$' + pageId;\n        this.phantom = phantom;\n    }\n\n    /**\n     * Add an event listener to the page on phantom\n     *\n     * @param event The name of the event (Ej. onResourceLoaded)\n     * @param [runOnPhantom=false] Indicate if the event must run on the phantom runtime or not\n     * @param listener The event listener. When runOnPhantom=true, this listener code would be run on phantom, and thus,\n     * all the closure info wont work\n     * @returns {*}\n     */\n    on(event, runOnPhantom, listener) {\n        let mustRunOnPhantom;\n        let callback;\n        let args;\n\n        if (typeof runOnPhantom === 'function') {\n            args = [].slice.call(arguments, 2);\n            mustRunOnPhantom = false;\n            callback = runOnPhantom.bind(this);\n        } else {\n            args = [].slice.call(arguments, 3);\n            mustRunOnPhantom = runOnPhantom;\n            callback = mustRunOnPhantom ? listener : listener.bind(this);\n        }\n\n        return this.phantom.on(event, this.target, mustRunOnPhantom, callback, args);\n    }\n\n    /**\n     * Removes an event listener\n     *\n     * @param event the event name\n     * @returns {*}\n     */\n    off(event) {\n        return this.phantom.off(event, this.target);\n    }\n\n    /**\n     * Invokes an asynchronous method\n     */\n    invokeAsyncMethod() {\n        return this.phantom.execute(this.target, 'invokeAsyncMethod', [].slice.call(arguments));\n    }\n\n    /**\n     * Invokes a method\n     */\n    invokeMethod() {\n        return this.phantom.execute(this.target, 'invokeMethod', [].slice.call(arguments));\n    }\n\n    /**\n     * Defines a method\n     */\n    defineMethod(name, definition) {\n        return this.phantom.execute(this.target, 'defineMethod', [name, definition]);\n    }\n\n    /**\n     * Gets or sets a property\n     */\n    property() {\n        return this.phantom.execute(this.target, 'property', [].slice.call(arguments));\n    }\n\n    /**\n     * Gets or sets a setting\n     */\n    setting() {\n        return this.phantom.execute(this.target, 'setting', [].slice.call(arguments));\n    }\n}\n\nexports.default = Page;\nconst asyncMethods = ['includeJs', 'open'];\n\nconst methods = ['addCookie', 'clearCookies', 'close', 'deleteCookie', 'evaluate', 'evaluateAsync', 'evaluateJavaScript', 'injectJs', 'openUrl', 'reload', 'render', 'renderBase64', 'sendEvent', 'setContent', 'setProxy', 'stop', 'switchToFrame', 'switchToMainFrame', 'goBack', 'uploadFile'];\n\nasyncMethods.forEach(method => {\n    // $FlowFixMe: no way to provide dynamic functions\n    Page.prototype[method] = function () {\n        return this.invokeAsyncMethod.apply(this, [method].concat([].slice.call(arguments)));\n    };\n});\n\nmethods.forEach(method => {\n    // $FlowFixMe: no way to provide dynamic functions\n    Page.prototype[method] = function () {\n        return this.invokeMethod.apply(this, [method].concat([].slice.call(arguments)));\n    };\n});","/home/travis/build/npmtest/node-npmtest-phantom/node_modules/phantom/lib/shim/function_bind_polyfill.js":"'use strict';\n\n/* eslint-disable no-extend-native, consistent-this, require-jsdoc, no-empty-function, no-invalid-this */\n\n/**\n * Ensure that Function has bind() method (PhantomJS version <= 1.9 support)\n * This is a Polyfill replacement from MDN.\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Polyfill}\n */\nif (!Function.prototype.bind) {\n    Function.prototype.bind = function (oThis) {\n        if (typeof this !== 'function') {\n            throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n        }\n\n        var self = this;\n        var aArgs = Array.prototype.slice.call(arguments, 1);\n\n        function NoopFunction() {}\n\n        function boundFunction() {\n            return self.apply(this instanceof NoopFunction ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));\n        }\n\n        if (this.prototype) {\n            NoopFunction.prototype = this.prototype;\n        }\n        boundFunction.prototype = new NoopFunction();\n\n        return boundFunction;\n    };\n}\n\n/* eslint-enable no-extend-native, consistent-this, require-jsdoc, no-empty-function, no-invalid-this */","/home/travis/build/npmtest/node-npmtest-phantom/node_modules/phantom/lib/shim/index.js":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _webpage = require('webpage');\n\nvar _webpage2 = _interopRequireDefault(_webpage);\n\nvar _system = require('system');\n\nvar _system2 = _interopRequireDefault(_system);\n\nrequire('./function_bind_polyfill.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Stores all all pages and single instance of phantom\n */\nvar objectSpace = {\n    phantom: phantom\n};\n\nvar events = {};\nvar NOOP = 'NOOP';\n\n/**\n * All commands that have a custom implementation\n */\nvar commands = {\n    createPage: function createPage(command) {\n        var page = _webpage2.default.create();\n        objectSpace['page$' + command.id] = page;\n\n        page.onClosing = function () {\n            return delete objectSpace['page$' + command.id];\n        };\n\n        command.response = { pageId: command.id };\n        completeCommand(command);\n    },\n    property: function property(command) {\n        if (command.params.length > 1) {\n            if (typeof command.params[1] === 'function') {\n                // If the second parameter is a function then we want to proxy and pass parameters too\n                var callback = command.params[1];\n                var args = command.params.slice(2);\n                syncOutObjects(args);\n                objectSpace[command.target][command.params[0]] = function () {\n                    var params = [].slice.call(arguments).concat(args);\n                    return callback.apply(objectSpace[command.target], params);\n                };\n            } else {\n                // If the second parameter is not a function then just assign\n                objectSpace[command.target][command.params[0]] = command.params[1];\n            }\n        } else {\n            command.response = objectSpace[command.target][command.params[0]];\n        }\n\n        completeCommand(command);\n    },\n    setting: function setting(command) {\n        if (command.params.length === 2) {\n            objectSpace[command.target].settings[command.params[0]] = command.params[1];\n        } else {\n            command.response = objectSpace[command.target].settings[command.params[0]];\n        }\n\n        completeCommand(command);\n    },\n\n    windowProperty: function windowProperty(command) {\n        if (command.params.length === 2) {\n            window[command.params[0]] = command.params[1];\n        } else {\n            command.response = window[command.params[0]];\n        }\n        completeCommand(command);\n    },\n\n    addEvent: function addEvent(command) {\n        var type = getTargetType(command.target);\n\n        if (isEventSupported(type, command.params[0].type)) {\n            var listeners = getEventListeners(command.target, command.params[0].type);\n\n            if (typeof command.params[0].event === 'function') {\n                listeners.otherListeners.push(function () {\n                    var params = [].slice.call(arguments).concat(command.params[0].args);\n                    return command.params[0].event.apply(objectSpace[command.target], params);\n                });\n            }\n        }\n\n        completeCommand(command);\n    },\n\n    removeEvent: function removeEvent(command) {\n        var type = getTargetType(command.target);\n\n        if (isEventSupported(type, command.params[0].type)) {\n            events[command.target][command.params[0].type] = null;\n            objectSpace[command.target][command.params[0].type] = null;\n        }\n\n        completeCommand(command);\n    },\n\n    noop: function noop(command) {\n        return completeCommand(command);\n    },\n\n    invokeAsyncMethod: function invokeAsyncMethod(command) {\n        var target = objectSpace[command.target];\n        target[command.params[0]].apply(target, command.params.slice(1).concat(function (result) {\n            command.response = result;\n            completeCommand(command);\n        }));\n    },\n\n    invokeMethod: function invokeMethod(command) {\n        var target = objectSpace[command.target];\n        var method = target[command.params[0]];\n        command.response = method.apply(target, command.params.slice(1));\n        completeCommand(command);\n    },\n\n    defineMethod: function defineMethod(command) {\n        var target = objectSpace[command.target];\n        target[command.params[0]] = command.params[1];\n        completeCommand(command);\n    }\n};\n\n/**\n * Calls readLine() and blocks until a message is ready\n */\nfunction read() {\n    var line = _system2.default.stdin.readLine();\n    if (line) {\n        if (line === NOOP) {\n            _system2.default.stdout.writeLine('>' + NOOP);\n            setTimeout(read, 100);\n            return;\n        }\n        var command = JSON.parse(line, function (key, value) {\n            if (value && typeof value === 'string' && value.substr(0, 8) === 'function' && value.indexOf('[native code]') === -1) {\n                var startBody = value.indexOf('{') + 1;\n                var endBody = value.lastIndexOf('}');\n                var startArgs = value.indexOf('(') + 1;\n                var endArgs = value.indexOf(')');\n\n                // eslint-disable-next-line no-new-func\n                return new Function(value.substring(startArgs, endArgs), value.substring(startBody, endBody));\n            }\n            return value;\n        });\n\n        // Call here to look for transform key\n        transform(command.params);\n\n        try {\n            executeCommand(command);\n        } catch (e) {\n            command.error = e.message;\n            completeCommand(command);\n        } finally {\n            setTimeout(read, 0);\n        }\n    }\n}\n\n/**\n * Looks for transform key and uses objectSpace to call objects\n * @param object\n */\nfunction transform(object) {\n    for (var key in object) {\n        if (object.hasOwnProperty(key)) {\n            var child = object[key];\n            if (child === null || child === undefined) {\n                return;\n            } else if (child.transform === true) {\n                object[key] = objectSpace[child.parent][child.method](child.target);\n            } else if ((typeof child === 'undefined' ? 'undefined' : _typeof(child)) === 'object') {\n                transform(child);\n            }\n        }\n    }\n}\n\n/**\n * Sync all OutObjects present in the array\n *\n * @param objects\n */\nfunction syncOutObjects(objects) {\n    objects.forEach(function (param) {\n        if (param.target !== undefined) {\n            objectSpace[param.target] = param;\n        }\n    });\n}\n\n/**\n * Executes a command.\n * @param command the command to execute\n */\nfunction executeCommand(command) {\n    if (commands[command.name]) {\n        return commands[command.name](command);\n    }\n    throw new Error('\\'' + command.name + '\\' isn\\'t a command.');\n}\n\n/**\n * Verifies if an event is supported for a type of target\n *\n * @param type\n * @param eventName\n * @returns {boolean}\n */\nfunction isEventSupported(type, eventName) {\n    return type === 'page' && eventName.indexOf('on') === 0;\n}\n\n/**\n * Gets an object containing all the listeners for an event of a target\n *\n * @param target the target id\n * @param eventName the event name\n */\nfunction getEventListeners(target, eventName) {\n    if (!events[target]) {\n        events[target] = {};\n    }\n\n    if (!events[target][eventName]) {\n        events[target][eventName] = {\n            outsideListener: getOutsideListener(eventName, target),\n            otherListeners: []\n        };\n\n        objectSpace[target][eventName] = triggerEvent.bind(null, target, eventName);\n    }\n\n    return events[target][eventName];\n}\n\n/**\n * Determines a targets type using its id\n *\n * @param target\n * @returns {*}\n */\nfunction getTargetType(target) {\n    return target.toString().split('$')[0];\n}\n\n/**\n * Executes all the listeners for an event from a target\n *\n * @param target\n * @param eventName\n */\nfunction triggerEvent(target, eventName) {\n    var args = [].slice.call(arguments, 2);\n    var listeners = events[target][eventName];\n    listeners.outsideListener.apply(null, args);\n    listeners.otherListeners.forEach(function (listener) {\n        listener.apply(objectSpace[target], args);\n    });\n}\n\n/**\n * Returns a function that will notify to node that an event have been triggered\n *\n * @param eventName\n * @param targetId\n * @returns {Function}\n */\nfunction getOutsideListener(eventName, targetId) {\n    return function () {\n        var args = [].slice.call(arguments, 0);\n        _system2.default.stdout.writeLine('<event>' + JSON.stringify({ target: targetId, type: eventName, args: args }));\n    };\n}\n\n/**\n * Completes a command by return a response to node and listening again for next command.\n * @param command\n */\nfunction completeCommand(command) {\n    _system2.default.stdout.writeLine('>' + JSON.stringify(command));\n}\n\nread();"}